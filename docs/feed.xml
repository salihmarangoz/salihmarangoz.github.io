<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://salihmarangoz.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://salihmarangoz.github.io/" rel="alternate" type="text/html" /><updated>2025-01-19T22:31:31+00:00</updated><id>https://salihmarangoz.github.io/feed.xml</id><title type="html">Salih Marangoz</title><subtitle>Portfolio Website</subtitle><entry><title type="html">Image Imputation using SVD</title><link href="https://salihmarangoz.github.io/blog/Image-Imputation-with-SVD/" rel="alternate" type="text/html" title="Image Imputation using SVD" /><published>2024-08-18T00:00:00+00:00</published><updated>2024-08-18T00:00:00+00:00</updated><id>https://salihmarangoz.github.io/blog/Image-Imputation-with-SVD</id><author><name></name></author><summary type="html"><![CDATA[Previously, we used SVD (Singular Value Decomposition) for lossy image compression. But could the same approach be adapted to recover an image with missing pixels?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://salihmarangoz.github.io/assets/images-notebook/2024-08-18-Image-Imputation-with-SVD.gif" /><media:content medium="image" url="https://salihmarangoz.github.io/assets/images-notebook/2024-08-18-Image-Imputation-with-SVD.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2D Scan Matcher using PyTorch</title><link href="https://salihmarangoz.github.io/blog/2D-Scan-Matcher-with-PyTorch/" rel="alternate" type="text/html" title="2D Scan Matcher using PyTorch" /><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><id>https://salihmarangoz.github.io/blog/2D-Scan-Matcher-with-PyTorch</id><author><name></name></author><summary type="html"><![CDATA[Exploring a 2D scan matcher implementation using PyTorch, focusing on solving the problem without explicitly computing correspondences for efficient and accurate results.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://salihmarangoz.github.io/assets/images-notebook/2023-03-19-2D-Scan-Matcher-with-PyTorch.png" /><media:content medium="image" url="https://salihmarangoz.github.io/assets/images-notebook/2023-03-19-2D-Scan-Matcher-with-PyTorch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Efficient Personal Backup Strategies using BTRFS</title><link href="https://salihmarangoz.github.io/blog/Backup-In-My-Pocket/" rel="alternate" type="text/html" title="Efficient Personal Backup Strategies using BTRFS" /><published>2022-07-13T00:00:00+00:00</published><updated>2022-07-13T00:00:00+00:00</updated><id>https://salihmarangoz.github.io/blog/Backup-In-My-Pocket</id><author><name></name></author><summary type="html"><![CDATA[My differential backup strategy using rsync and an external storage formatted with BTRFS+LUKS which supports encryption, on-the-fly compression, de-duplication, and filesystem-level snapshot.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://salihmarangoz.github.io/assets/images-markdown/2022-07-13-Backup-In-My-Pocket/26609087.png" /><media:content medium="image" url="https://salihmarangoz.github.io/assets/images-markdown/2022-07-13-Backup-In-My-Pocket/26609087.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Uniform-like Sampling of Superellipsoid Surface</title><link href="https://salihmarangoz.github.io/blog/Superellipsoid_Sampling/" rel="alternate" type="text/html" title="Uniform-like Sampling of Superellipsoid Surface" /><published>2022-04-23T00:00:00+00:00</published><updated>2022-04-23T00:00:00+00:00</updated><id>https://salihmarangoz.github.io/blog/Superellipsoid_Sampling</id><author><name></name></author><summary type="html"><![CDATA[Superellipsoids are a mathematical concept commonly used for modeling and completing shapes in 3D point clouds. In this post, we will demonstrate how to uniformly sample the surface of a superellipsoid in the Cartesian coordinate system.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://salihmarangoz.github.io/assets/images-notebook/2022-04-23-superellipsoid_sampling.gif" /><media:content medium="image" url="https://salihmarangoz.github.io/assets/images-notebook/2022-04-23-superellipsoid_sampling.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Implementing a Neural Network from Scratch Using NumPy</title><link href="https://salihmarangoz.github.io/blog/Neural-Network-with-Numpy/" rel="alternate" type="text/html" title="Implementing a Neural Network from Scratch Using NumPy" /><published>2022-02-25T00:00:00+00:00</published><updated>2022-02-25T00:00:00+00:00</updated><id>https://salihmarangoz.github.io/blog/Neural-Network-with-Numpy</id><author><name></name></author><summary type="html"><![CDATA[Implementing a two-layered neural network from scratch, training on the MNIST dataset, and comparing its performance to identical a PyTorch implementation.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://salihmarangoz.github.io/assets/images-notebook/2022-02-25-NN-Speed-Challenge-Numpy-Pytorch.png" /><media:content medium="image" url="https://salihmarangoz.github.io/assets/images-notebook/2022-02-25-NN-Speed-Challenge-Numpy-Pytorch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Image Scaling using Fourier Transform</title><link href="https://salihmarangoz.github.io/blog/FFT-Downscale/" rel="alternate" type="text/html" title="Image Scaling using Fourier Transform" /><published>2022-02-24T00:00:00+00:00</published><updated>2022-02-24T00:00:00+00:00</updated><id>https://salihmarangoz.github.io/blog/FFT-Downscale</id><author><name></name></author><summary type="html"><![CDATA[Image scaling is commonly achieved using interpolation methods like nearest neighbor, bilinear, or bicubic interpolation. However, in this post, we will tackle the problem using the Fourier Transform, exploring its unique approach to image scaling while addressing various challenges along the way.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://salihmarangoz.github.io/assets/images-notebook/2022-02-24-FFT-Downscale.gif" /><media:content medium="image" url="https://salihmarangoz.github.io/assets/images-notebook/2022-02-24-FFT-Downscale.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Implementing Numerical Optimization using PyTorch</title><link href="https://salihmarangoz.github.io/blog/PyTorch-Optimizers-And-Rosenbrock-Function/" rel="alternate" type="text/html" title="Implementing Numerical Optimization using PyTorch" /><published>2021-04-21T00:00:00+00:00</published><updated>2021-04-21T00:00:00+00:00</updated><id>https://salihmarangoz.github.io/blog/PyTorch-Optimizers-And-Rosenbrock-Function</id><author><name></name></author><summary type="html"><![CDATA[The Rosenbrock function is a non-convex function which is used as a performance test problem for optimization algorithms. In this post, we will be visualizing optimization steps for Adadelta, Adagrad, Adam, AdamW, Adamax, ASGD, LBFGS, RMSprop, etc.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://salihmarangoz.github.io/assets/images-notebook/2021-04-21-PyTorch-Optimizers-And-Rosenbrock-Function.png" /><media:content medium="image" url="https://salihmarangoz.github.io/assets/images-notebook/2021-04-21-PyTorch-Optimizers-And-Rosenbrock-Function.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Implementing Numerical Optimization Methods from Scratch</title><link href="https://salihmarangoz.github.io/blog/Numerical-Optimization-From-Scratch/" rel="alternate" type="text/html" title="Implementing Numerical Optimization Methods from Scratch" /><published>2021-04-05T00:00:00+00:00</published><updated>2021-04-05T00:00:00+00:00</updated><id>https://salihmarangoz.github.io/blog/Numerical-Optimization-From-Scratch</id><author><name></name></author><summary type="html"><![CDATA[In this post, we will be implementing various gradient-based numerical optimization methods from scratch using Numpy.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://salihmarangoz.github.io/assets/images-notebook/2021-04-05-Numerical-Optimization-From-Scratch.png" /><media:content medium="image" url="https://salihmarangoz.github.io/assets/images-notebook/2021-04-05-Numerical-Optimization-From-Scratch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2D PointCloud Scan Matcher</title><link href="https://salihmarangoz.github.io/blog/2D-Scan-Matcher/" rel="alternate" type="text/html" title="2D PointCloud Scan Matcher" /><published>2021-03-30T00:00:00+00:00</published><updated>2021-03-30T00:00:00+00:00</updated><id>https://salihmarangoz.github.io/blog/2D-Scan-Matcher</id><author><name></name></author><summary type="html"><![CDATA[Scan matching plays a crucial role in Robotics, particularly in localization, by aligning sensor data to accurately estimate a robot's position and orientation. In this post, we will implement a 2D point scan matcher in Python, focusing on its application in precise localization.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://salihmarangoz.github.io/assets/images-notebook/2021-03-30-2D-Scan-Matcher.gif" /><media:content medium="image" url="https://salihmarangoz.github.io/assets/images-notebook/2021-03-30-2D-Scan-Matcher.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Integral Estimation using the Monte Carlo Method</title><link href="https://salihmarangoz.github.io/blog/Monte-Carlo-Method/" rel="alternate" type="text/html" title="Integral Estimation using the Monte Carlo Method" /><published>2021-03-28T00:00:00+00:00</published><updated>2021-03-28T00:00:00+00:00</updated><id>https://salihmarangoz.github.io/blog/Monte-Carlo-Method</id><author><name></name></author><summary type="html"><![CDATA[Monte Carlo methods are computational algorithms that rely on repeated random sampling to obtain numerical results. In this post, we will be estimating the pi value and integral of an example function.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://salihmarangoz.github.io/assets/images-notebook/2021-03-28-Monte-Carlo-Method.png" /><media:content medium="image" url="https://salihmarangoz.github.io/assets/images-notebook/2021-03-28-Monte-Carlo-Method.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>